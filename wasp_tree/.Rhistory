for (i in 1:sims) {
succ <- rbinom(before120$adjprobs,size=pres08$EV,n = 51)
sum.succ <- sum(predwins)
predwins <- c(predwins,sum.succ)
}
return(predwins)
}
electoral(before120, sims)
#
# temp <- split(before120$adjprobs, nrow(timesseries))
#
#
# for (j in 1:nrow(timesseries)) {
#   date <- timesseries[j,"day"]
#   for(i in 1:nrow(before120)) {
#   if(as.numeric(date) == as.numeric(before120[i,"day"])) {
#
#     DF <- data.frame(date,predwins)
#   }
# }}
#last120 <- as.data.frame(predwins,dates1000)
#hist(predwins,xlab = "simulated Obama votes",main = "histogram of predicted votes for Obama with the actual votes as the vertical line")
#abline(v=365,col= "purple")
succ
sum.succ <- sum(predwins)
sum.succ
sum.succ <- sum(predwins)
sims <- 2
DF <- NULL
predwins <- NULL
electoral <- function(df, sims) {
for (i in 1:sims) {
succ <- rbinom(before120$adjprobs,size=pres08$EV,n = 51)
succ
sum.succ <- sum(succ)
sum.succ
predwins <- c(predwins,sum.succ)
}
return(predwins)
}
electoral(before120, sims)
#
# temp <- split(before120$adjprobs, nrow(timesseries))
#
#
# for (j in 1:nrow(timesseries)) {
#   date <- timesseries[j,"day"]
#   for(i in 1:nrow(before120)) {
#   if(as.numeric(date) == as.numeric(before120[i,"day"])) {
#
#     DF <- data.frame(date,predwins)
#   }
# }}
#last120 <- as.data.frame(predwins,dates1000)
#hist(predwins,xlab = "simulated Obama votes",main = "histogram of predicted votes for Obama with the actual votes as the vertical line")
#abline(v=365,col= "purple")
## Finding my path:
getwd()
stdev()
shiny::runApp('Dropbox/0.Toth/OUTREACH_Interactive_Phylogeny/wasp_tree')
# library(tidyverse)
# library(ggtree)
install.packages("phylocanvas")
install.packages(c("ape", "phylocanvas"))
runApp('Dropbox/0.Toth/OUTREACH_Interactive_Phylogeny/wasp_tree')
shiny::runApp('Dropbox/0.Toth/OUTREACH_Interactive_Phylogeny/wasp_tree')
runApp('Dropbox/0.Toth/OUTREACH_Interactive_Phylogeny/wasp_tree')
knitr::opts_chunk$set(echo = TRUE)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
headerPanel("Test Tree"),
# Show a plot of the generated distribution
mainPanel(
# plotOutput("pTree"),
phylocanvasOutput("phyloTree")
)
)
)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(shiny)
library(ape)
# library(tidyverse)
# library(ggtree)
library(phylocanvas)
# Chunk 3
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
headerPanel("Test Tree"),
# Show a plot of the generated distribution
mainPanel(
# plotOutput("pTree"),
phylocanvasOutput("phyloTree")
)
)
)
# Chunk 4
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
nwkfile<-read.tree(file="tree_file.nwk")
treeFile<- makeNodeLabel(nwkfile)
treeFile<- as(treeFile,"phylo4")
phycanv <- phylocanvas(treeFile,treetype = "rectangular", alignlabels = T)
# output$pTree <- renderPlot({ggtree(nwkfile)+ geom_tiplab() + xlim(0,5) + geom_point()})
output$phyloTree <- renderPhylocanvas({#env = parent.frame(1), quoted = T
phycanv
})
# output$click_info <- renderPrint({
#     nearPoints(ggtree(nwkfile), input$pTree_click, addDist = TRUE)
# })
})
# Chunk 5
shinyApp(ui = ui, server = server)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(shiny)
library(ape)
# library(tidyverse)
# library(ggtree)
library(phylocanvas)
# Chunk 3
# Define UI for application that draws a histogram
ui <- shinyUI(fluidPage(
# Application title
headerPanel("Test Tree"),
# Show a plot of the generated distribution
mainPanel(
# plotOutput("pTree"),
phylocanvasOutput("phyloTree")
)
)
)
# Chunk 4
# Define server logic required to draw a histogram
server <- shinyServer(function(input, output) {
nwkfile<-read.tree(file="tree_file.nwk")
treeFile<- makeNodeLabel(nwkfile)
treeFile<- as(treeFile,"phylo4")
phycanv <- phylocanvas(treeFile,treetype = "rectangular", alignlabels = T)
# output$pTree <- renderPlot({ggtree(nwkfile)+ geom_tiplab() + xlim(0,5) + geom_point()})
output$phyloTree <- renderPhylocanvas({#env = parent.frame(1), quoted = T
phycanv
})
# output$click_info <- renderPrint({
#     nearPoints(ggtree(nwkfile), input$pTree_click, addDist = TRUE)
# })
})
# Chunk 5
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(ape)
# library(tidyverse)
# library(ggtree)
library(phylocanvas)
# Define UI for application that draws a histogram
ui <- shinyUI(fluidPage(
# Application title
headerPanel("Test Tree"),
# Show a plot of the generated distribution
mainPanel(
# plotOutput("pTree"),
phylocanvasOutput("phyloTree")
)
)
)
# Define server logic required to draw a histogram
server <- shinyServer(function(input, output) {
nwkfile<-read.tree(file="tree_file.nwk")
treeFile<- makeNodeLabel(nwkfile)
treeFile<- as(treeFile,"phylo4")
phycanv <- phylocanvas(treeFile,treetype = "rectangular", alignlabels = T)
# output$pTree <- renderPlot({ggtree(nwkfile)+ geom_tiplab() + xlim(0,5) + geom_point()})
output$phyloTree <- renderPhylocanvas({#env = parent.frame(1), quoted = T
phycanv
})
# output$click_info <- renderPrint({
#     nearPoints(ggtree(nwkfile), input$pTree_click, addDist = TRUE)
# })
})
shinyApp(ui = ui, server = server)
library(XBRL)
XBRL::getSchemaName
url <- "https://www.sec.gov/Archives/edgar/data/1594466/000159446620000076/pe-20200331_htm.xml"
fixFileName <- function(dname, file.name) {
if (substr(file.name, 1, 5) != "http:") {
if (substr(file.name, 1, 5) == "../..") { ## A better solution is preferred, but it works for now
file.name <- paste0(dirname(dirname(dname)), "/",  substr(file.name, 7, nchar(file.name)))
} else if (substr(file.name, 1, 2) == "..") {
file.name <- paste0(dirname(dname), "/", substr(file.name, 4, nchar(file.name)))
} else {
file.name <- paste0(dname,"/", file.name)
}
}
file.name
}
fixFileName("", url)
aapl <- "http://edgar.sec.gov/Archives/edgar/data/320193/000119312514383437/aapl-20140927.xml"
fixFileName("", aapl)
fixFileName <- function(dname, file.name) {
if (substr(file.name, 1, 5) != "http:") {
if (substr(file.name, 1, 5) == "../..") { ## A better solution is preferred, but it works for now
file.name <- paste0(dirname(dirname(dname)), "/",  substr(file.name, 7, nchar(file.name)))
} else if (substr(file.name, 1, 2) == "..") {
file.name <- paste0(dirname(dname), "/", substr(file.name, 4, nchar(file.name)))
} else {
#file.name <- paste0(dname,"/", file.name)
file.name <- paste0(dname, file.name)
}
}
file.name
}
fixFileName("", aapl)
fixFileName("", urk)
fixFileName("", url)
XBRL <- function() {
self <- list(element=NULL, role=NULL,
label=NULL, presentation=NULL, definition=NULL, calculation=NULL,
context=NULL, unit=NULL, fact=NULL, footnote=NULL)
cache.dir <- NULL
discovered.files <- NULL
doc.inst <- NULL
dname.inst <- NULL
verbose <- FALSE
inst.lnkb <- NULL
fixFileName <- function(dname, file.name) {
if (substr(file.name, 1, 5) != "http:") {
if (substr(file.name, 1, 5) == "../..") { ## A better solution is preferred, but it works for now
file.name <- paste0(dirname(dirname(dname)), "/",  substr(file.name, 7, nchar(file.name)))
} else if (substr(file.name, 1, 2) == "..") {
file.name <- paste0(dirname(dname), "/", substr(file.name, 4, nchar(file.name)))
} else {
file.name <- paste0(dname, file.name)
}
}
file.name
}
setVerbose <- function(newVerbose) {
oldVerbose <- verbose
verbose <<- newVerbose
oldVerbose
}
setCacheDir <- function(new.cache.dir) {
if (!file.exists(new.cache.dir)) {
dir.create(new.cache.dir)
}
cache.dir <<- new.cache.dir
}
fileFromCache <- function(file) {
if (!(gsub("^(http|https|ftp)://.*$", "\\1", file) %in% c("http", "https", "ftp"))) {
return (file)
}
bname <- basename(file)
cached.file <- paste0(cache.dir, "/", bname)
if (!file.exists(cached.file)) {
if (verbose) {
cat("Downloading to cache dir...")
}
status <- try(download.file(file, cached.file, quiet = !verbose),
silent=TRUE)
if (class(status)[1] == "try-error" || status == 1) {
unlink(cached.file)
stop(status, "\n")
}
} else {
if (verbose) {
cat("Using file from cache dir...\n")
}
}
cached.file
}
openInstance <- function(file.inst) {
dname.inst <<- dirname(file.inst)
if (!is.null(cache.dir)) {
file.inst <- fileFromCache(file.inst)
inst.lnkb <<- file.inst
}
doc.inst <<- XBRL::xbrlParse(file.inst)
}
deleteCachedInstance <- function() {
if (verbose) {
cat("Deleting the following downloaded and/or cached files...\n")
print(inst.lnkb)
}
unlink(inst.lnkb)
if (verbose) {
cat("Done...\n")
}
}
getSchemaName <- function() {
fixFileName(dname.inst, .Call("xbrlGetSchemaName", doc.inst, PACKAGE="XBRL"))
}
processSchema <- function(file, level=1) {
if (verbose) {
cat("Schema: ", file, "\n")
}
if (length(which(discovered.files == file)) > 0) {
if (verbose) {
cat("Already discovered. Skipping\n")
}
return (NULL)
}
discovered.files <<- c(discovered.files, file)
dname <- dirname(file)
if (level >= 1 && !is.null(cache.dir)) {
if (verbose) {
cat("Level:", level,  "==>", file, "\n")
}
file <- fileFromCache(file)
if (level == 1) {
inst.lnkb <<- c(inst.lnkb, file)
}
}
doc <- XBRL::xbrlParse(file)
if (level == 1) {
processRoles(doc)
}
processElements(doc)
linkbaseNames <- .Call("xbrlGetLinkbaseNames", doc, PACKAGE="XBRL")
importNames <- .Call("xbrlGetImportNames", doc, PACKAGE="XBRL")
.Call("xbrlFree", doc, PACKAGE="XBRL")
for (linkbaseName in linkbaseNames) {
linkbaseName <- fixFileName(dname, linkbaseName)
if (verbose) {
cat(file," ==> Linkbase: ", linkbaseName,"\n")
}
processLinkbase(linkbaseName, level+1)
}
for (importName in importNames) {
importName <- fixFileName(dname, importName)
if (verbose) {
cat(file," ==> Schema: ", importName,"\n")
}
processSchema(importName, level+1)
}
}
processRoles <- function(doc) {
if (verbose) {
cat("Roles\n")
}
self$role <<- rbind(self$role,
.Call("xbrlProcessRoles", doc, PACKAGE="XBRL"))
}
processElements <- function(doc) {
if (verbose) {
cat("Elements\n")
}
self$element <<- rbind(self$element,
.Call("xbrlProcessElements", doc, PACKAGE="XBRL"))
}
processLinkbase <- function(file, level) {
if (verbose) {
cat("Linkbase: ", file, "\n")
}
if (length(which(discovered.files == file)) > 0) {
if (verbose) {
cat("Already discovered. Skipping\n")
}
return (NULL)
}
discovered.files <<- c(discovered.files, file)
if (level >= 2 && !is.null(cache.dir)) {
if (verbose) {
cat("Level:", level,  "==>", file, "\n")
}
file <- fileFromCache(file)
inst.lnkb <<- c(inst.lnkb, file)
}
doc <- XBRL::xbrlParse(file)
## We assume there can be only one type per linkbase file
if (!processLabels(doc)) {
if (!processPresentations(doc)) {
if (!processDefinitions(doc)) {
processCalculations(doc)
}
}
}
.Call("xbrlFree", doc, PACKAGE="XBRL")
}
processLabels <- function(doc) {
pre.length <- length(self$label)
self$label <<- rbind(self$label,
ans <- .Call("xbrlProcessLabels", doc, PACKAGE="XBRL"))
if (!is.null(ans)) {
if (verbose) {
cat("Labels.\n")
}
return (TRUE)
}
FALSE
}
processPresentations <- function(doc) {
pre.length <- length(self$presentation)
self$presentation <<- rbind(self$presentation,
ans <- .Call("xbrlProcessArcs", doc, "presentation", PACKAGE="XBRL"))
if (!is.null(ans)) {
if (verbose) {
cat("Presentations.\n")
}
return (TRUE)
}
FALSE
}
processDefinitions <- function(doc) {
pre.length <- length(self$definition)
self$definition <<- rbind(self$definition,
ans <- .Call("xbrlProcessArcs", doc, "definition", PACKAGE="XBRL"))
if (!is.null(ans)) {
if (verbose) {
cat("Definitions.\n")
}
return (TRUE)
}
FALSE
}
processCalculations <- function(doc) {
pre.length <- length(self$calculation)
self$calculation <<- rbind(self$calculation,
ans <- .Call("xbrlProcessArcs", doc, "calculation", PACKAGE="XBRL"))
if (!is.null(ans)) {
if (verbose) {
cat("Calculations.\n")
}
return (TRUE)
}
FALSE
}
processContexts <- function() {
if (verbose) {
cat("Contexts\n")
}
self$context <<- .Call("xbrlProcessContexts", doc.inst, PACKAGE="XBRL")
}
processFacts <- function() {
if (verbose) {
cat("Facts\n")
}
self$fact <<- .Call("xbrlProcessFacts", doc.inst, PACKAGE="XBRL")
}
processUnits <- function() {
if (verbose) {
cat("Units\n")
}
self$unit <<- .Call("xbrlProcessUnits", doc.inst, PACKAGE="XBRL")
}
processFootnotes <- function() {
if (verbose) {
cat("Footnotes\n")
}
self$footnote <<- .Call("xbrlProcessFootnotes", doc.inst, PACKAGE="XBRL")
}
closeInstance <- function() {
.Call("xbrlFree", doc.inst, PACKAGE="XBRL")
doc.inst <<- NULL
}
getResults <- function() {
self
}
list(setVerbose=setVerbose,
setCacheDir=setCacheDir,
openInstance=openInstance,
deleteCachedInstance=deleteCachedInstance,
getSchemaName=getSchemaName,
processSchema=processSchema,
processContexts=processContexts,
processFacts=processFacts,
processUnits=processUnits,
processFootnotes=processFootnotes,
closeInstance=closeInstance,
getResults=getResults)
}
data <- xbrlDoAll(url)
#Load in libraries
library(maps) #contains functions to use with the map
library(mapdata) #contains basic world maps
library(maptools)
library(ggplot2) #for making plots
library(RColorBrewer)
library(mapproj)
install.packages("mapproj")
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(ape)
# library(tidyverse)
# library(ggtree)
library(phylocanvas)
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
nwkfile<-read.tree(file="tree_file.nwk")
treeFile<- makeNodeLabel(nwkfile)
treeFile<- as(treeFile,"phylo4")
phycanv <- phylocanvas(treeFile,treetype = "rectangular", alignlabels = T)
# output$pTree <- renderPlot({ggtree(nwkfile)+ geom_tiplab() + xlim(0,5) + geom_point()})
output$phyloTree <- renderPhylocanvas({#env = parent.frame(1), quoted = T
phycanv
})
# output$click_info <- renderPrint({
#     nearPoints(ggtree(nwkfile), input$pTree_click, addDist = TRUE)
# })
})
runApp('Dropbox/GitHub.Local/social-insects-interactive-phylogeny/wasp_tree')
